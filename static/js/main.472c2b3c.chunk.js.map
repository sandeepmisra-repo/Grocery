{"version":3,"sources":["components/Header.js","components/TodosItem.js","components/RetrivedTodos.js","components/TodoForm.js","fire.js","App.js","serviceWorker.js","index.js"],"names":["Header","date","Date","month","toLocaleString","myDate","getDate","year","getFullYear","day","toLocaleDateString","weekday","className","React","Component","TodosItem","getParentDivStyle","textDecoration","props","mytodos","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","deleteTodo","RetrivedTodos","todos","map","key","TodoForm","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addTodo","action","onSubmit","autoComplete","placeholder","required","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","newTodos","database","ref","child","remove","push","set","previousTodos","on","snap","val","i","length","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.472c2b3c.chunk.js","sourcesContent":["import React from 'react'\n\nclass Header extends React.Component {\n    render() {\n        const date = new Date();\n        const month = date.toLocaleString('default', { month: 'long' });\n        const myDate = date.getDate();\n        const year = date.getFullYear();\n        const day = date.toLocaleDateString('default', { weekday: 'long' });\n        return (\n            <div className='main-header-div'>\n                <div className='background-div'></div>\n                <div className='date-month-div'>\n                    <span>{myDate}</span>\n                    <span>{month}</span>\n                    <span>{year}</span>\n                    <span>{day}</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header\n","import React, { Component } from 'react'\n\nclass TodosItem extends Component {\n    getParentDivStyle = () => {\n        return {\n            textDecoration: this.props.mytodos.completed ?\n                'line-through' : 'none'\n        }\n    }\n    render() {\n        const { id, title } = this.props.mytodos\n        return (\n            <div className='main-todos-div' style={this.getParentDivStyle()}>\n                <div className='todo-div'>\n                    <input className='checkbox-round' type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} />\n                    <span>{title}</span>\n                </div>\n                <div className='btn-div'>\n                    <button onClick={this.props.deleteTodo.bind(this, id)}><i className='fas fa-trash'></i></button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TodosItem\n","import React from 'react'\nimport TodosItem from './TodosItem'\n\nclass RetrivedTodos extends React.Component {\n    render() {\n        return this.props.todos.map((mytodos) => (\n            <TodosItem mytodos={mytodos} key={mytodos.id} markComplete={this.props.markComplete} deleteTodo={this.props.deleteTodo} />\n        ))\n    }\n}\n\nexport default RetrivedTodos\n","import React, { Component } from 'react'\n\nclass TodoForm extends Component {\n    state = {\n        title: ''\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            title: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({\n            title: ''\n        })\n    }\n    render() {\n        return (\n            <div className='todo-form'>\n                <form action=\"\" onSubmit={this.handleSubmit} className='form' autoComplete=\"off\">\n                    <input className='form-input' id='todo' type=\"text\" placeholder='ADD ITEMS...' onChange={this.handleChange} required value={this.state.title} />\n                    <button type=\"submit\" className='form-btn'>\n                        <i className='fas fa-plus'></i>\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default TodoForm\n","import firebase from 'firebase'\n\n// replace this with your credentials\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA70mQ5UlTpwWyv7vQV-SHCIZYZ00HM4kw\",\n    authDomain: \"todo-app-d87b8.firebaseapp.com\",\n    databaseURL: \"https://todo-app-d87b8.firebaseio.com\",\n    projectId: \"todo-app-d87b8\",\n    storageBucket: \"todo-app-d87b8.appspot.com\",\n    messagingSenderId: \"334384180440\",\n    appId: \"1:334384180440:web:01f19fadbba4253c797bad\",\n    measurementId: \"G-D1K39DQFGM\"\n};\n// ----------------------------------------//\n\nconst fire = firebase.initializeApp(firebaseConfig);\nexport default fire;","import React from 'react';\nimport Header from './components/Header'\nimport RetrivedTodos from './components/RetrivedTodos'\nimport TodoForm from './components/TodoForm'\nimport fire from './fire'\n\nclass App extends React.Component {\n  state = {\n    todos: [\n      // { id: 1, title: 'get haircut', completed: false },\n      // { id: 2, title: 'learn react', completed: false },\n      // { id: 3, title: 'learn redux', completed: false }\n    ]\n  }\n\n  componentDidMount() {\n    // adding toods\n    const previousTodos = this.state.todos;\n    fire.database().ref('todos').on('child_added', snap => {\n      previousTodos.push({\n        id: snap.key,\n        title: snap.val().title,\n        completed: false\n      })\n      this.setState({\n        todos: previousTodos\n      })\n    })\n    // deleteing todos\n    fire.database().ref('todos').on('child_removed', snap => {\n      for (var i = 0; i < previousTodos.length; i++) {\n        if (previousTodos[i].id === snap.key) {\n          previousTodos.splice(i, 1);\n        }\n      }\n      this.setState({\n        todos: previousTodos\n      })\n    })\n  }\n\n  markComplete = (id) => {\n    // console.log(id);\n    this.setState({\n      todos: this.state.todos.map((newTodos) => {\n        if (newTodos.id === id) {\n          newTodos.completed = !newTodos.completed\n        }\n        return newTodos\n      })\n    })\n  }\n  deleteTodo = (id) => {\n    // console.log(id);\n    // this.setState({\n    //   todos: [\n    //     ...this.state.todos.filter((newTodo) => {\n    //       return newTodo.id !== id\n    //     })\n    //   ]\n    // })\n    fire.database().ref('todos').child(id).remove();\n  }\n  addTodo = (title) => {\n    // const newTodo = {\n    //   id: Math.random(),\n    //   title,\n    //   completed: false\n    // }\n    // this.setState({\n    //   todos: [...this.state.todos, newTodo]\n    // })\n\n\n    // firebase\n    fire.database().ref('todos').push().set({ title: title })\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className='todo-box'>\n          <RetrivedTodos todos={this.state.todos} markComplete={this.markComplete} deleteTodo={this.deleteTodo} />\n        </div>\n        <TodoForm addTodo={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}